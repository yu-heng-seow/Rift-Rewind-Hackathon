================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2025-10-28T21:43:40.333673

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
README.md
frontend\README.md
frontend\components.json
frontend\eslint.config.js
frontend\index.html
frontend\jsconfig.json
frontend\package.json
frontend\postcss.config.js
frontend\src\App.jsx
frontend\src\components\AchievementsSection.jsx
frontend\src\components\CardRevealSection.jsx
frontend\src\components\ChampionShowcase.jsx
frontend\src\components\ClosingSection.jsx
frontend\src\components\Footer.jsx
frontend\src\components\Header.jsx
frontend\src\components\HeroSection.jsx
frontend\src\components\InputArea.jsx
frontend\src\components\PlaystyleAnalysis.jsx
frontend\src\components\ScrollingBackground.jsx
frontend\src\components\StatsOverview.jsx
frontend\src\components\TimelineSection.jsx
frontend\src\components\ui\avatar.jsx
frontend\src\components\ui\button.jsx
frontend\src\components\ui\card.jsx
frontend\src\components\ui\input.jsx
frontend\src\components\ui\menubar.jsx
frontend\src\global.css
frontend\src\layout\Landing.jsx
frontend\src\layout\Loading.jsx
frontend\src\layout\Statistics.jsx
frontend\src\layout\TestLayout.jsx
frontend\src\main.jsx
frontend\tailwind.config.js
frontend\vite.config.js
requirements.txt

================================================================
Repository Files
================================================================

================
File: README.md
================
# Rift-Rewind-Hackathon

## Github Workflow Convention

#### feature/SAW

#### feature/Progress

#### feature/yearEndSum

#### feature/SocialComparison

#### feature/frontend

### Commit in own branch, push to own branch, if wnat to merge -> open PR

================
File: frontend\components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/global.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "registries": {}
}

================
File: frontend\eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

================
File: frontend\index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Rift-Rewind</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: frontend\jsconfig.json
================
{
  "references": [

  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: frontend\package.json
================
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@gsap/react": "^2.1.2",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-menubar": "^1.1.16",
    "@radix-ui/react-slot": "^1.2.3",
    "@tailwindcss/vite": "^4.1.14",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.23.24",
    "gsap": "^3.13.0",
    "lucide-react": "^0.544.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.4",
    "simplex-noise": "^4.0.3",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@tailwindcss/postcss": "^4.1.16",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.16",
    "tw-animate-css": "^1.4.0",
    "vite": "^7.1.7"
  }
}

================
File: frontend\postcss.config.js
================
export default {
  plugins: {
    "@tailwindcss/postcss": {},
    autoprefixer: {},
  },
};

================
File: frontend\README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) (or [oxc](https://oxc.rs) when used in [rolldown-vite](https://vite.dev/guide/rolldown)) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template because of its impact on dev & build performances. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

================
File: frontend\tailwind.config.js
================
/** @type {import('tailwindcss').Config} */

export default {
  darkMode: ["class"],
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      backgroundImage: {
        'gradient-gold': 'var(--gradient-gold)',
        'gradient-blue': 'var(--gradient-blue)',
        'gradient-purple': 'var(--gradient-purple)',
        'gradient-hero': 'var(--gradient-hero)',
      },
      boxShadow: {
        'glow-gold': 'var(--shadow-glow-gold)',
        'glow-blue': 'var(--shadow-glow-blue)',
        'glow-purple': 'var(--shadow-glow-purple)',
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
        "float": {
          "0%, 100%": { transform: "translateY(0px)" },
          "50%": { transform: "translateY(-20px)" },
        },
        "pulse-glow": {
          "0%, 100%": { opacity: "1" },
          "50%": { opacity: "0.6" },
        },
        "slide-up": {
          "0%": { transform: "translateY(50px)", opacity: "0" },
          "100%": { transform: "translateY(0)", opacity: "1" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "float": "float 3s ease-in-out infinite",
        "pulse-glow": "pulse-glow 2s ease-in-out infinite",
        "slide-up": "slide-up 0.6s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

================
File: frontend\vite.config.js
================
import path from "path"
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from'@tailwindcss/vite'

export default defineConfig({
    plugins: [react(), tailwindcss(),],
    resolve: {
        alias: {
        "@": path.resolve(__dirname, "./src"),
        },
    },
});

================
File: frontend\src\App.jsx
================
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Landing from '@/layout/Landing';
import Loading from '@/layout/Loading';
import Statistics from '@/layout/Statistics';
import TestLayout from '@/layout/TestLayout';

export default function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Landing />} />
        <Route path="/loading" element={<Loading />} />
        <Route path="/statistics" element={<Statistics />} />
        <Route path="/test" element={<TestLayout />} />
        {/* Handle 404 Not Found pages */}
        <Route path="*" element={<h1>404 Not Found</h1>} />
      </Routes>
    </BrowserRouter>
  );
}

================
File: frontend\src\global.css
================
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}


:root {
  --background: hsl(222 47% 5%);
  --foreground: hsl(45 100% 95%);
  --card: hsl(222 47% 8%);
  --card-foreground: hsl(45 100% 95%);
  --primary: hsl(45 93% 51%);
  --primary-foreground: hsl(222 47% 11%);
  --secondary: hsl(175 82% 39%);
  --secondary-foreground: hsl(222 47% 5%);
  --accent: hsl(270 91% 65%);
  --accent-foreground: hsl(45 100% 95%);
  --muted: hsl(222 47% 15%);
  --muted-foreground: hsl(45 20% 70%);
  --destructive: hsl(0 84% 60%);
  --border: hsl(222 47% 20%);
  --input: hsl(222 47% 20%);
  --ring: hsl(45 93% 51%);
  --radius: 0.5rem;

  /* Gradients */
  --gradient-gold: linear-gradient(135deg, hsl(45 93% 51%) 0%, hsl(38 90% 45%) 100%);
  --gradient-blue: linear-gradient(135deg, hsl(175 82% 39%) 0%, hsl(190 90% 50%) 100%);
  --gradient-purple: linear-gradient(135deg, hsl(270 91% 65%) 0%, hsl(280 85% 55%) 100%);
  --gradient-hero: linear-gradient(180deg, hsl(222 47% 8%) 0%, hsl(222 47% 5%) 50%, hsl(270 50% 10%) 100%);

  /* Shadows */
  --shadow-glow-gold: 0 0 25px hsl(45 93% 51% / 0.4);
  --shadow-glow-blue: 0 0 25px hsl(175 82% 39% / 0.4);
  --shadow-glow-purple: 0 0 25px hsl(270 91% 65% / 0.4);

  --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
}

@layer base {
  body {
    @apply bg-background text-foreground antialiased;
    scroll-behavior: smooth;
    background: var(--gradient-hero);
    background-attachment: fixed;
    background-size: cover;
    background-repeat: no-repeat;
  }

  /* Reusable utilities */
  .bg-gradient-gold {
    background: var(--gradient-gold);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .bg-card\/50 {
    background-color: hsl(222 47% 8% / 0.5);
  }

  .shadow-glow-gold { box-shadow: var(--shadow-glow-gold); }
  .shadow-glow-blue { box-shadow: var(--shadow-glow-blue); }
  .shadow-glow-purple { box-shadow: var(--shadow-glow-purple); }

  /* Floating effect for subtle motion */
  .animate-float {
    animation: float 3s ease-in-out infinite;
  }

  /* Light noise element for hover visuals or parallax effects */
  .noise-circle {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    pointer-events: none;
  }
}

================
File: frontend\src\main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './global.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: frontend\src\components\AchievementsSection.jsx
================
import { useEffect, useRef } from "react"
import { motion } from "framer-motion"
import gsap from "gsap"
import { ScrollTrigger } from "gsap/ScrollTrigger"
import { Card } from "@/components/ui/card"

gsap.registerPlugin(ScrollTrigger)

const achievements = [
  {
    title: "Pentakill Master",
    description: "Achieved 7 pentakills throughout the season",
    rarity: "Legendary",
    date: "Aug 15, 2024",
    icon: "🏆"
  },
  {
    title: "Challenger Mindset",
    description: "Reached Platinum I division",
    rarity: "Epic",
    date: "Oct 3, 2024",
    icon: "💎"
  },
  {
    title: "Marathon Session",
    description: "Played 18 games in a single day",
    rarity: "Rare",
    date: "Jul 22, 2024",
    icon: "⚡"
  },
  {
    title: "Comeback Champion",
    description: "Won 5 games in a row after being down 10k gold",
    rarity: "Epic",
    date: "Sep 8, 2024",
    icon: "🔥"
  },
  {
    title: "Vision Legend",
    description: "Placed over 500 wards in ranked games",
    rarity: "Rare",
    date: "Nov 12, 2024",
    icon: "👁️"
  },
  {
    title: "One Trick Wonder",
    description: "Achieved Mastery 7 on Yasuo",
    rarity: "Epic",
    date: "Jun 30, 2024",
    icon: "⭐"
  }
]

const rarityColors = {
  Legendary: "border-primary text-primary shadow-glow-gold",
  Epic: "border-accent text-accent shadow-glow-purple",
  Rare: "border-secondary text-secondary shadow-glow-blue"
}

const AchievementsSection = () => {
  const sectionRef = useRef(null)

  useEffect(() => {
    if (!sectionRef.current) return

    const achievementCards = sectionRef.current.querySelectorAll(
      ".achievement-card"
    )

    achievementCards.forEach((card, index) => {
      gsap.from(card, {
        scrollTrigger: {
          trigger: card,
          start: "top 85%",
          end: "top 50%",
          scrub: 1
        },
        scale: 0.8,
        opacity: 0,
        rotation: Math.random() * 20 - 10
      })
    })
  }, [])

  return (
    <section
      ref={sectionRef}
      className="py-24 px-4 bg-gradient-to-b from-background/50 to-background"
    >
      <div className="container mx-auto max-w-6xl">
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          whileInView={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-5xl md:text-6xl font-black mb-4 text-primary">
            Achievements Unlocked
          </h2>
          <p className="text-xl text-muted-foreground">
            Your legendary moments this year
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {achievements.map((achievement, index) => (
            <motion.div
              key={achievement.title}
              whileHover={{ scale: 1.05, rotate: 2 }}
              transition={{ type: "spring", stiffness: 300 }}
              className="achievement-card"
            >
              <Card
                className={`p-6 bg-card/50 backdrop-blur-sm border-2 ${
                  rarityColors[achievement.rarity]
                } transition-all duration-300 h-full relative overflow-hidden group`}
              >
                <div className="absolute inset-0 bg-gradient-gold opacity-0 group-hover:opacity-5 transition-opacity duration-300" />
                <div className="relative z-10">
                  <div className="flex items-start justify-between mb-4">
                    <div className="text-5xl animate-pulse-glow">
                      {achievement.icon}
                    </div>
                    <span
                      className={`text-xs font-bold px-3 py-1 rounded-full border ${
                        rarityColors[achievement.rarity]
                      }`}
                    >
                      {achievement.rarity}
                    </span>
                  </div>
                  <h3 className="text-xl font-bold mb-2 text-foreground">
                    {achievement.title}
                  </h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    {achievement.description}
                  </p>
                  <p className="text-xs text-muted-foreground">
                    {achievement.date}
                  </p>
                </div>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  )
}

export default AchievementsSection

================
File: frontend\src\components\CardRevealSection.jsx
================
import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { Card } from "@/components/ui/card"
import { X } from "lucide-react"

const specialChampions = [
  {
    id: 1,
    name: "Yasuo",
    title: "The Unforgiven",
    image:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Yasuo_0.jpg",
    cardImage:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/loading/Yasuo_0.jpg",
    rarity: "Legendary",
    stats: {
      mastery: 7,
      points: "487,392",
      games: 124,
      winRate: 54,
      kda: "3.2",
      pentakills: 3,
      quadrakills: 12,
      triplekills: 45
    }
  },
  {
    id: 2,
    name: "Zed",
    title: "The Master of Shadows",
    image:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Zed_0.jpg",
    cardImage:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/loading/Zed_0.jpg",
    rarity: "Legendary",
    stats: {
      mastery: 7,
      points: "412,847",
      games: 98,
      winRate: 51,
      kda: "3.8",
      pentakills: 2,
      quadrakills: 15,
      triplekills: 38
    }
  },
  {
    id: 3,
    name: "Akali",
    title: "The Rogue Assassin",
    image:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Akali_0.jpg",
    cardImage:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/loading/Akali_0.jpg",
    rarity: "Epic",
    stats: {
      mastery: 6,
      points: "298,156",
      games: 76,
      winRate: 58,
      kda: "4.1",
      pentakills: 1,
      quadrakills: 8,
      triplekills: 32
    }
  },
  {
    id: 4,
    name: "Katarina",
    title: "The Sinister Blade",
    image:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Katarina_0.jpg",
    cardImage:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/loading/Katarina_0.jpg",
    rarity: "Epic",
    stats: {
      mastery: 6,
      points: "267,943",
      games: 69,
      winRate: 52,
      kda: "3.5",
      pentakills: 4,
      quadrakills: 11,
      triplekills: 29
    }
  }
]

const CardRevealSection = () => {
  const [selectedChampion, setSelectedChampion] = useState(null)

  return (
    <section className="py-24 px-4 relative z-10">
      <div className="container mx-auto max-w-6xl">
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          whileInView={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-5xl md:text-6xl font-black mb-4 bg-gradient-purple bg-clip-text text-transparent">
            Special Champion Cards
          </h2>
          <p className="text-xl text-muted-foreground">
            Click to reveal your legendary champions
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {specialChampions.map((champion, index) => (
            <motion.div
              key={champion.id}
              initial={{ scale: 0, rotate: -10 }}
              whileInView={{ scale: 1, rotate: 0 }}
              transition={{ delay: index * 0.1, duration: 0.5 }}
              viewport={{ once: true }}
              whileHover={{ scale: 1.05, y: -10 }}
              onClick={() => setSelectedChampion(champion)}
              className="cursor-pointer"
            >
              <Card className="overflow-hidden bg-gradient-to-b from-card/80 to-card/40 backdrop-blur-md border-2 border-accent/30 hover:border-accent transition-all duration-300 shadow-glow-purple h-full">
                <div className="relative aspect-[3/4] overflow-hidden">
                  <img
                    src={champion.image}
                    alt={champion.name}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-card via-card/50 to-transparent" />
                  <div className="absolute bottom-0 left-0 right-0 p-4">
                    <div className="text-xs font-bold text-accent mb-1">
                      {champion.rarity}
                    </div>
                    <h3 className="text-2xl font-black text-foreground">
                      {champion.name}
                    </h3>
                    <p className="text-sm text-muted-foreground">
                      {champion.title}
                    </p>
                  </div>
                </div>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>

      <AnimatePresence>
        {selectedChampion && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-background/95 backdrop-blur-lg z-50 flex items-center justify-center p-4"
            onClick={() => setSelectedChampion(null)}
          >
            <motion.div
              initial={{ scale: 0.8, rotateY: -90 }}
              animate={{ scale: 1, rotateY: 0 }}
              exit={{ scale: 0.8, rotateY: 90 }}
              transition={{ type: "spring", duration: 0.7 }}
              onClick={e => e.stopPropagation()}
              className="relative max-w-4xl w-full"
            >
              <Card className="overflow-hidden bg-gradient-to-br from-card via-card/90 to-accent/20 border-4 border-accent shadow-glow-purple">
                <button
                  onClick={() => setSelectedChampion(null)}
                  className="absolute top-4 right-4 z-10 bg-background/80 hover:bg-background text-foreground rounded-full p-2 transition-colors"
                >
                  <X className="w-6 h-6" />
                </button>

                <div className="flex flex-col md:flex-row">
                  <div className="relative w-full md:w-1/2">
                    <img
                      src={selectedChampion.cardImage}
                      alt={selectedChampion.name}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-r from-transparent to-card/80" />
                  </div>

                  <div className="flex-1 p-8">
                    <div className="mb-6">
                      <div className="inline-block px-4 py-1 bg-accent/20 border border-accent rounded-full mb-4">
                        <span className="text-accent font-bold text-sm">
                          {selectedChampion.rarity}
                        </span>
                      </div>
                      <h2 className="text-5xl font-black text-foreground mb-2">
                        {selectedChampion.name}
                      </h2>
                      <p className="text-xl text-muted-foreground">
                        {selectedChampion.title}
                      </p>
                      <div className="flex items-center gap-2 mt-4">
                        {Array.from({
                          length: selectedChampion.stats.mastery
                        }).map((_, i) => (
                          <span key={i} className="text-primary text-2xl">
                            â˜…
                          </span>
                        ))}
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4 mb-6">
                      <div className="bg-background/50 rounded-lg p-4 border border-border">
                        <div className="text-sm text-muted-foreground mb-1">
                          Mastery Points
                        </div>
                        <div className="text-2xl font-bold text-primary">
                          {selectedChampion.stats.points}
                        </div>
                      </div>
                      <div className="bg-background/50 rounded-lg p-4 border border-border">
                        <div className="text-sm text-muted-foreground mb-1">
                          Games Played
                        </div>
                        <div className="text-2xl font-bold text-secondary">
                          {selectedChampion.stats.games}
                        </div>
                      </div>
                      <div className="bg-background/50 rounded-lg p-4 border border-border">
                        <div className="text-sm text-muted-foreground mb-1">
                          Win Rate
                        </div>
                        <div className="text-2xl font-bold text-accent">
                          {selectedChampion.stats.winRate}%
                        </div>
                      </div>
                      <div className="bg-background/50 rounded-lg p-4 border border-border">
                        <div className="text-sm text-muted-foreground mb-1">
                          KDA
                        </div>
                        <div className="text-2xl font-bold text-foreground">
                          {selectedChampion.stats.kda}
                        </div>
                      </div>
                    </div>

                    <div className="bg-gradient-to-r from-accent/20 to-transparent rounded-lg p-4 border-l-4 border-accent">
                      <div className="text-sm font-bold text-accent mb-2">
                        Multikills
                      </div>
                      <div className="flex gap-4 text-sm">
                        <div>
                          <span className="text-muted-foreground">
                            Pentakills:
                          </span>
                          <span className="ml-2 font-bold text-primary">
                            {selectedChampion.stats.pentakills}
                          </span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">
                            Quadrakills:
                          </span>
                          <span className="ml-2 font-bold text-secondary">
                            {selectedChampion.stats.quadrakills}
                          </span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">
                            Triplekills:
                          </span>
                          <span className="ml-2 font-bold text-accent">
                            {selectedChampion.stats.triplekills}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </section>
  )
}

export default CardRevealSection

================
File: frontend\src\components\ChampionShowcase.jsx
================
import { useEffect, useRef } from "react";
import { motion } from "framer-motion";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { Card } from "@/components/ui/card";

gsap.registerPlugin(ScrollTrigger);

const champions = [
  {
    name: "Yasuo",
    mastery: 7,
    points: "487,392",
    games: 124,
    winRate: 54,
    kda: "3.2",
    image:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Yasuo_0.jpg",
  },
  {
    name: "Zed",
    mastery: 7,
    points: "412,847",
    games: 98,
    winRate: 51,
    kda: "3.8",
    image:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Zed_0.jpg",
  },
  {
    name: "Lee Sin",
    mastery: 6,
    points: "324,156",
    games: 87,
    winRate: 49,
    kda: "2.9",
    image:
      "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/LeeSin_0.jpg",
  },
];

const ChampionShowcase = () => {
  const sectionRef = useRef(null);

  useEffect(() => {
    if (!sectionRef.current) return;

    const championCards = sectionRef.current.querySelectorAll(".champion-card");

    championCards.forEach((card, index) => {
      gsap.from(card, {
        scrollTrigger: {
          trigger: card,
          start: "top 85%",
          end: "top 40%",
          scrub: 1,
        },
        x: index % 2 === 0 ? -100 : 100,
        opacity: 0,
        rotation: index % 2 === 0 ? -5 : 5,
      });
    });
  }, []);

  return (
    <section
      ref={sectionRef}
      className="py-24 px-4 bg-gradient-to-b from-background to-background/50"
    >
      <div className="container mx-auto max-w-6xl">
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          whileInView={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-5xl md:text-6xl font-black mb-4 bg-gradient-blue bg-clip-text text-transparent">
            Champion Mastery
          </h2>
          <p className="text-xl text-muted-foreground">
            Your most played legends
          </p>
        </motion.div>

        <div className="space-y-8">
          {champions.map((champion, index) => (
            <motion.div
              key={champion.name}
              whileHover={{ scale: 1.02 }}
              className="champion-card"
            >
              <Card className="overflow-hidden bg-card/30 backdrop-blur-md border-2 border-border hover:border-secondary transition-all duration-300 shadow-glow-blue">
                <div className="flex flex-col md:flex-row">
                  <div className="relative w-full md:w-1/3 h-64 md:h-auto overflow-hidden">
                    <img
                      src={champion.image}
                      alt={champion.name}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-r from-transparent to-card/90" />
                    <div className="absolute top-4 left-4 bg-primary text-primary-foreground px-4 py-2 rounded-full font-bold">
                      #{index + 1}
                    </div>
                  </div>

                  <div className="flex-1 p-8">
                    <div className="flex items-center gap-4 mb-6">
                      <h3 className="text-4xl font-black text-foreground">
                        {champion.name}
                      </h3>
                      <div className="flex items-center gap-2">
                        {Array.from({ length: champion.mastery }).map(
                          (_, i) => (
                            <span key={i} className="text-primary text-2xl">
                              â˜…
                            </span>
                          )
                        )}
                      </div>
                    </div>

                    <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                      <div>
                        <div className="text-sm text-muted-foreground mb-1">
                          Mastery Points
                        </div>
                        <div className="text-2xl font-bold text-primary">
                          {champion.points}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-muted-foreground mb-1">
                          Games Played
                        </div>
                        <div className="text-2xl font-bold text-secondary">
                          {champion.games}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-muted-foreground mb-1">
                          Win Rate
                        </div>
                        <div className="text-2xl font-bold text-accent">
                          {champion.winRate}%
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-muted-foreground mb-1">
                          KDA
                        </div>
                        <div className="text-2xl font-bold text-foreground">
                          {champion.kda}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default ChampionShowcase;

================
File: frontend\src\components\ClosingSection.jsx
================
import { motion } from "framer-motion"

const ClosingSection = () => {
  return (
    <section className="min-h-screen flex items-center justify-center px-4 bg-gradient-hero relative overflow-hidden">
      <div className="absolute inset-0">
        <motion.div
          className="absolute w-96 h-96 bg-primary/10 rounded-full blur-3xl"
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.3, 0.6, 0.3]
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut"
          }}
          style={{ top: "20%", left: "20%" }}
        />
        <motion.div
          className="absolute w-96 h-96 bg-secondary/10 rounded-full blur-3xl"
          animate={{
            scale: [1, 1.3, 1],
            opacity: [0.3, 0.6, 0.3]
          }}
          transition={{
            duration: 10,
            repeat: Infinity,
            ease: "easeInOut"
          }}
          style={{ bottom: "20%", right: "20%" }}
        />
      </div>

      <div className="relative z-10 text-center max-w-4xl">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          whileInView={{ scale: 1, opacity: 1 }}
          transition={{ duration: 1 }}
          viewport={{ once: true }}
        >
          <h2 className="text-6xl md:text-7xl lg:text-8xl font-black mb-8 bg-gradient-gold bg-clip-text text-transparent">
            See You on the Rift
          </h2>
          <p className="text-2xl md:text-3xl text-foreground/80 mb-12">
            Your legend continues in 2025
          </p>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
            <motion.div
              whileHover={{ scale: 1.1 }}
              className="p-6 bg-card/30 backdrop-blur-sm rounded-lg border-2 border-primary"
            >
              <div className="text-5xl mb-4">🎯</div>
              <div className="text-3xl font-bold text-primary mb-2">487</div>
              <div className="text-sm text-muted-foreground">Total Games</div>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.1 }}
              className="p-6 bg-card/30 backdrop-blur-sm rounded-lg border-2 border-secondary"
            >
              <div className="text-5xl mb-4">🏆</div>
              <div className="text-3xl font-bold text-secondary mb-2">
                52.7%
              </div>
              <div className="text-sm text-muted-foreground">Win Rate</div>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.1 }}
              className="p-6 bg-card/30 backdrop-blur-sm rounded-lg border-2 border-accent"
            >
              <div className="text-5xl mb-4">⚡</div>
              <div className="text-3xl font-bold text-accent mb-2">324</div>
              <div className="text-sm text-muted-foreground">Hours Played</div>
            </motion.div>
          </div>

          <motion.p
            initial={{ y: 30, opacity: 0 }}
            whileInView={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.5, duration: 0.8 }}
            viewport={{ once: true }}
            className="text-lg text-muted-foreground"
          >
            Thank you for an incredible year. Here's to climbing even higher in
            the next season!
          </motion.p>
        </motion.div>
      </div>
    </section>
  )
}

export default ClosingSection

================
File: frontend\src\components\Footer.jsx
================
export default function Footer() {
  return (
    <footer className="py-4 text-center text-gray-500 text-sm bg-black border-t border-gray-800">
        Design & Developed by Benson/Edwin/Yuheng/Zhi Yi @ 2025
    </footer>
  );
}

================
File: frontend\src\components\Header.jsx
================
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator
} from "@/components/ui/menubar"; 

export default function Header() {
  return (
    <header className="sticky top-0 z-50 w-full flex items-center justify-between px-6 py-2 bg-none">
      {/* Left: Logo */}
      <div className="flex items-center">
        <h1 className="text-lg font-bold text-white">Rift Rewind</h1>
      </div>

      {/* Center: Menubar */}
      <div className="flex-1 flex justify-center">
        <Menubar className="bg-black/20 shadow-none border-none">
          <MenubarMenu>
            <MenubarTrigger>Overview</MenubarTrigger>
            <MenubarContent>
              <MenubarItem>Dashboard</MenubarItem>
              <MenubarItem>Stats</MenubarItem>
              <MenubarSeparator />
              <MenubarItem>Highlights</MenubarItem>
            </MenubarContent>
          </MenubarMenu>

          <MenubarMenu>
            <MenubarTrigger>Achievements</MenubarTrigger>
            <MenubarContent>
              <MenubarItem>Top Champions</MenubarItem>
              <MenubarItem>Game Milestones</MenubarItem>
            </MenubarContent>
          </MenubarMenu>

          <MenubarMenu>
            <MenubarTrigger>Others</MenubarTrigger>
          </MenubarMenu>
        </Menubar>
      </div>

      {/* Right: Avatar */}
      <div className="flex items-center">
        <Avatar className="w-8 h-8">
          <AvatarImage src="https://ddragon.leagueoflegends.com/cdn/14.20.1/img/profileicon/588.png" />
          <AvatarFallback>U</AvatarFallback>
        </Avatar>
      </div>
    </header>
  );
}

================
File: frontend\src\components\HeroSection.jsx
================
import { useEffect, useRef } from "react";
import { motion } from "framer-motion";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

const HeroSection = () => {
  const heroRef = useRef(null);
  const titleRef = useRef(null);

  useEffect(() => {
    if (!heroRef.current || !titleRef.current) return;

    gsap.to(heroRef.current, {
      scrollTrigger: {
        trigger: heroRef.current,
        start: "top top",
        end: "bottom top",
        scrub: 1,
      },
      y: 200,
      opacity: 0.5,
    });

    gsap.from(titleRef.current, {
      scrollTrigger: {
        trigger: titleRef.current,
        start: "top 80%",
      },
      y: 100,
      opacity: 0,
      duration: 1,
      ease: "power3.out",
    });
  }, []);

  return (
    <section
      ref={heroRef}
      className="relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-hero"
    >
      <div className="absolute inset-0 overflow-hidden">
        <motion.div
          className="absolute w-96 h-96 bg-primary/20 rounded-full blur-3xl"
          animate={{
            x: [0, 100, 0],
            y: [0, -100, 0],
          }}
          transition={{
            duration: 20,
            repeat: Infinity,
            ease: "linear",
          }}
          style={{ top: "10%", left: "10%" }}
        />
        <motion.div
          className="absolute w-96 h-96 bg-secondary/20 rounded-full blur-3xl"
          animate={{
            x: [0, -100, 0],
            y: [0, 100, 0],
          }}
          transition={{
            duration: 25,
            repeat: Infinity,
            ease: "linear",
          }}
          style={{ bottom: "10%", right: "10%" }}
        />
        <motion.div
          className="absolute w-64 h-64 bg-accent/20 rounded-full blur-3xl"
          animate={{
            x: [0, 50, 0],
            y: [0, -50, 0],
          }}
          transition={{
            duration: 15,
            repeat: Infinity,
            ease: "linear",
          }}
          style={{ top: "50%", left: "50%" }}
        />
      </div>

      <div className="relative z-10 text-center px-4">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.8 }}
          className="mb-8"
        >
          <h2 className="text-xl md:text-2xl text-primary font-semibold mb-4 tracking-wider">
            YOUR YEAR IN REVIEW
          </h2>
        </motion.div>

        <h1
          ref={titleRef}
          className="text-6xl md:text-8xl lg:text-9xl font-black mb-8 bg-gradient-gold bg-clip-text text-transparent"
          style={{
            textShadow: "0 0 40px rgba(200, 155, 60, 0.5)",
          }}
        >
          2024
        </h1>

        <motion.p
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.5, duration: 0.8 }}
          className="text-xl md:text-2xl text-foreground/80 max-w-2xl mx-auto"
        >
          Your legendary journey through the Rift
        </motion.p>

        <motion.div
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.8, duration: 0.8 }}
          className="mt-12"
        >
          <div className="inline-block animate-float">
            <svg
              className="w-8 h-8 text-primary"
              fill="none"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
            </svg>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default HeroSection;

================
File: frontend\src\components\InputArea.jsx
================
import { use, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { serviceworker } from "globals";

export default function InputArea() {
  const [playerId, setPlayerId] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    navigate("/loading", {state: {playerId} });
  };

  return (
    <form onSubmit={handleSubmit} className="relative w-full max-w-sm">
      <Input
        type="text"
        value={playerId}
        onChange={(e) => setPlayerId(e.target.value)}
        placeholder="Please key in your id..."
        className="pr-30" 
        required
      />
      <Button
      type="submit"
        size="sm"
        className="absolute right-0.5 top-0.5 h-[calc(100%-0.25rem)]"
      >
        View Summary
      </Button>
    </form>
  );
}

================
File: frontend\src\components\PlaystyleAnalysis.jsx
================
import { useEffect, useRef } from "react"
import { motion } from "framer-motion"
import gsap from "gsap"
import { ScrollTrigger } from "gsap/ScrollTrigger"
import { Card } from "@/components/ui/card"

gsap.registerPlugin(ScrollTrigger)

const roles = [
  { name: "Mid Lane", percentage: 42, color: "bg-primary" },
  { name: "Jungle", percentage: 28, color: "bg-secondary" },
  { name: "Top Lane", percentage: 18, color: "bg-accent" },
  { name: "ADC", percentage: 8, color: "bg-destructive" },
  { name: "Support", percentage: 4, color: "bg-muted" }
]

const insights = [
  {
    title: "Aggressive Playstyle",
    description:
      "You averaged 8.2 kills per game, showing a proactive approach to teamfights",
    icon: "⚔️"
  },
  {
    title: "Vision Master",
    description: "487 wards placed - keeping your team informed and safe",
    icon: "👁️"
  },
  {
    title: "Objective Focused",
    description: "73% dragon participation rate, you know what wins games",
    icon: "🐉"
  },
  {
    title: "Comeback King",
    description: "12 victories from behind - never surrender mentality",
    icon: "👑"
  }
]

const PlaystyleAnalysis = () => {
  const sectionRef = useRef(null)
  const barsRef = useRef(null)

  useEffect(() => {
    if (!barsRef.current) return

    const bars = barsRef.current.querySelectorAll(".role-bar")

    bars.forEach(bar => {
      gsap.from(bar, {
        scrollTrigger: {
          trigger: bar,
          start: "top 80%"
        },
        width: 0,
        duration: 1.5,
        ease: "power3.out"
      })
    })
  }, [])

  return (
    <section ref={sectionRef} className="py-24 px-4 relative overflow-hidden">
      <div className="absolute inset-0 bg-gradient-purple opacity-5" />

      <div className="container mx-auto max-w-6xl relative z-10">
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          whileInView={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-5xl md:text-6xl font-black mb-4 bg-gradient-purple bg-clip-text text-transparent">
            Your Playstyle
          </h2>
          <p className="text-xl text-muted-foreground">
            Understanding your approach to the game
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
          <Card className="p-8 bg-card/50 backdrop-blur-sm border-2 border-border">
            <h3 className="text-3xl font-bold mb-8 text-accent">
              Role Distribution
            </h3>
            <div ref={barsRef} className="space-y-6">
              {roles.map(role => (
                <div key={role.name}>
                  <div className="flex justify-between mb-2">
                    <span className="font-semibold text-foreground">
                      {role.name}
                    </span>
                    <span className="text-muted-foreground">
                      {role.percentage}%
                    </span>
                  </div>
                  <div className="h-4 bg-muted rounded-full overflow-hidden">
                    <motion.div
                      className={`role-bar h-full ${role.color}`}
                      style={{ width: `${role.percentage}%` }}
                      whileHover={{ scale: 1.05 }}
                    />
                  </div>
                </div>
              ))}
            </div>
          </Card>

          <Card className="p-8 bg-card/50 backdrop-blur-sm border-2 border-border">
            <h3 className="text-3xl font-bold mb-8 text-accent">
              Performance Stats
            </h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center py-3 border-b border-border">
                <span className="text-muted-foreground">Average KDA</span>
                <span className="text-2xl font-bold text-primary">3.4</span>
              </div>
              <div className="flex justify-between items-center py-3 border-b border-border">
                <span className="text-muted-foreground">Win Rate</span>
                <span className="text-2xl font-bold text-secondary">52.7%</span>
              </div>
              <div className="flex justify-between items-center py-3 border-b border-border">
                <span className="text-muted-foreground">CS/Min</span>
                <span className="text-2xl font-bold text-accent">7.2</span>
              </div>
              <div className="flex justify-between items-center py-3">
                <span className="text-muted-foreground">Avg Game Length</span>
                <span className="text-2xl font-bold text-foreground">31m</span>
              </div>
            </div>
          </Card>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {insights.map((insight, index) => (
            <motion.div
              key={insight.title}
              initial={{ y: 50, opacity: 0 }}
              whileInView={{ y: 0, opacity: 1 }}
              transition={{ delay: index * 0.1, duration: 0.6 }}
              viewport={{ once: true }}
              whileHover={{ scale: 1.05 }}
            >
              <Card className="p-6 bg-card/30 backdrop-blur-md border-2 border-border hover:border-accent transition-all duration-300 h-full shadow-glow-purple">
                <div className="text-4xl mb-4">{insight.icon}</div>
                <h4 className="text-xl font-bold mb-2 text-foreground">
                  {insight.title}
                </h4>
                <p className="text-muted-foreground">{insight.description}</p>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  )
}

export default PlaystyleAnalysis

================
File: frontend\src\components\ScrollingBackground.jsx
================
import { useEffect, useRef } from "react"
import gsap from "gsap"
import { ScrollTrigger } from "gsap/ScrollTrigger"
import { createNoise2D } from "simplex-noise"

gsap.registerPlugin(ScrollTrigger)

const ScrollingBackground = () => {
  const containerRef = useRef(null)

  useEffect(() => {
    if (!containerRef.current) return

    const simplex = createNoise2D()
    const circles = []

    // Create noise circles
    for (let i = 0; i < 3000; i++) {
      const div = document.createElement("div")
      div.classList.add("noise-circle")
      const n1 = simplex(i * 0.003, i * 0.0033)
      const n2 = simplex(i * 0.002, i * 0.001)

      const hue = Math.floor(i * 0.3) % 360
      const style = {
        transform: `translate(${n2 * 200}px, ${n1 * 200}px) rotate(${n2 *
          270}deg) scale(${3 + n1 * 2}, ${3 + n2 * 2})`,
        boxShadow: `0 0 0 .2px hsla(${hue}, 70%, 60%, .4)`,
        opacity: "0"
      }
      Object.assign(div.style, style)
      containerRef.current.appendChild(div)
      circles.push(div)
    }

    // Animate circles on scroll
    const timeline = gsap.timeline({
      scrollTrigger: {
        trigger: containerRef.current,
        start: "top top",
        end: "bottom bottom",
        scrub: 0.7
      }
    })

    circles.forEach((circle, i) => {
      timeline.to(
        circle,
        {
          opacity: i % 3 === 0 ? 0.6 : 0.3
        },
        0
      )
    })

    return () => {
      ScrollTrigger.getAll().forEach(st => st.kill())
      circles.forEach(circle => circle.remove())
    }
  }, [])

  return (
    <div
      ref={containerRef}
      className="fixed inset-0 pointer-events-none z-0"
      style={{
        width: "100%",
        height: "100%"
      }}
    />
  )
}

export default ScrollingBackground

================
File: frontend\src\components\StatsOverview.jsx
================
import { useEffect, useRef } from "react";
import { motion } from "framer-motion";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { Card } from "@/components/ui/card";

gsap.registerPlugin(ScrollTrigger);

const stats = [
  { label: "Games Played", value: "487", icon: "🎮" },
  { label: "Hours in Game", value: "324", icon: "⏱️" },
  { label: "Total Kills", value: "3,892", icon: "⚔️" },
  { label: "Pentakills", value: "7", icon: "🔥" },
];

const StatsOverview = () => {
  const sectionRef = useRef(null);

  useEffect(() => {
    if (!sectionRef.current) return;

    const cards = sectionRef.current.querySelectorAll(".stat-card");

    cards.forEach((card, index) => {
      gsap.from(card, {
        scrollTrigger: {
          trigger: card,
          start: "top 80%",
          end: "top 50%",
          scrub: 1,
        },
        y: 100,
        opacity: 0,
        delay: index * 0.1,
      });
    });
  }, []);

  return (
    <section ref={sectionRef} className="py-24 px-4 relative">
      <div className="container mx-auto max-w-6xl">
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          whileInView={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-5xl md:text-6xl font-black mb-4 text-primary">
            By The Numbers
          </h2>
          <p className="text-xl text-muted-foreground">
            Your battlefield statistics
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {stats.map((stat) => (
            <motion.div
              key={stat.label}
              whileHover={{ scale: 1.05, y: -10 }}
              transition={{ type: "spring", stiffness: 300 }}
            >
              <Card className="stat-card bg-card/50 backdrop-blur-sm border-2 border-border hover:border-primary transition-all duration-300 p-8 text-center relative overflow-hidden group shadow-glow-gold">
                <div className="absolute inset-0 bg-gradient-gold opacity-0 group-hover:opacity-10 transition-opacity duration-300" />
                <div className="relative z-10">
                  <div className="text-5xl mb-4 animate-pulse-glow">
                    {stat.icon}
                  </div>
                  <div className="text-4xl md:text-5xl font-black text-primary mb-2">
                    {stat.value}
                  </div>
                  <div className="text-sm uppercase tracking-wider text-muted-foreground">
                    {stat.label}
                  </div>
                </div>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default StatsOverview;

================
File: frontend\src\components\TimelineSection.jsx
================
import { useEffect, useRef } from "react"
import { motion } from "framer-motion"
import gsap from "gsap"
import { ScrollTrigger } from "gsap/ScrollTrigger"
import { Card } from "@/components/ui/card"

gsap.registerPlugin(ScrollTrigger)

const timelineEvents = [
  {
    month: "January",
    title: "Season Start",
    description: "Placed in Gold III after placements",
    highlight: "Started strong with 7-3 placements"
  },
  {
    month: "March",
    title: "Champion Pool Expansion",
    description: "Mastered Zed and Lee Sin",
    highlight: "Added two new champions to rotation"
  },
  {
    month: "June",
    title: "Yasuo Mastery 7",
    description: "Achieved highest mastery with main champion",
    highlight: "487K mastery points"
  },
  {
    month: "August",
    title: "Pentakill Spree",
    description: "Epic month with 3 pentakills",
    highlight: "Best performance of the season"
  },
  {
    month: "October",
    title: "Platinum Promotion",
    description: "Reached Platinum I for the first time",
    highlight: "Personal best rank achieved"
  },
  {
    month: "December",
    title: "Year-End Push",
    description: "Finished with 52.7% win rate",
    highlight: "487 total games played"
  }
]

const TimelineSection = () => {
  const sectionRef = useRef(null)
  const lineRef = useRef(null)

  useEffect(() => {
    if (!lineRef.current) return

    gsap.from(lineRef.current, {
      scrollTrigger: {
        trigger: sectionRef.current,
        start: "top 60%",
        end: "bottom 20%",
        scrub: 1
      },
      scaleY: 0,
      transformOrigin: "top"
    })
  }, [])

  return (
    <section ref={sectionRef} className="py-24 px-4 relative">
      <div className="container mx-auto max-w-4xl">
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          whileInView={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-5xl md:text-6xl font-black mb-4 bg-gradient-gold bg-clip-text text-transparent">
            Your Journey
          </h2>
          <p className="text-xl text-muted-foreground">
            Key moments throughout 2024
          </p>
        </motion.div>

        <div className="relative">
          {/* Timeline line */}
          <div
            ref={lineRef}
            className="absolute left-4 md:left-1/2 top-0 bottom-0 w-1 bg-gradient-to-b from-primary via-secondary to-accent"
            style={{ transform: "translateX(-50%)" }}
          />

          <div className="space-y-12">
            {timelineEvents.map((event, index) => (
              <motion.div
                key={event.month}
                initial={{ x: index % 2 === 0 ? -100 : 100, opacity: 0 }}
                whileInView={{ x: 0, opacity: 1 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
                className={`flex items-center ${
                  index % 2 === 0 ? "md:flex-row" : "md:flex-row-reverse"
                } flex-col md:gap-8`}
              >
                <div
                  className={`flex-1 ${
                    index % 2 === 0 ? "md:text-right" : "md:text-left"
                  } mb-4 md:mb-0`}
                >
                  <Card className="p-6 bg-card/50 backdrop-blur-sm border-2 border-border hover:border-primary transition-all duration-300 inline-block">
                    <motion.div
                      whileHover={{ scale: 1.05 }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      <div className="text-sm text-primary font-bold mb-2">
                        {event.month}
                      </div>
                      <h3 className="text-2xl font-bold mb-2 text-foreground">
                        {event.title}
                      </h3>
                      <p className="text-muted-foreground mb-2">
                        {event.description}
                      </p>
                      <p className="text-sm text-secondary font-semibold">
                        {event.highlight}
                      </p>
                    </motion.div>
                  </Card>
                </div>

                <div className="relative z-10">
                  <motion.div
                    whileHover={{ scale: 1.2, rotate: 180 }}
                    className="w-12 h-12 rounded-full bg-gradient-gold border-4 border-background shadow-glow-gold flex items-center justify-center"
                  >
                    <span className="text-xl font-bold text-primary-foreground">
                      {index + 1}
                    </span>
                  </motion.div>
                </div>

                <div className="flex-1 hidden md:block" />
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
}

export default TimelineSection

================
File: frontend\src\components\ui\avatar.jsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn("relative flex size-8 shrink-0 overflow-hidden rounded-full", className)}
      {...props} />
  );
}

function AvatarImage({
  className,
  ...props
}) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props} />
  );
}

function AvatarFallback({
  className,
  ...props
}) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props} />
  );
}

export { Avatar, AvatarImage, AvatarFallback }

================
File: frontend\src\components\ui\button.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
        "icon-sm": "size-8",
        "icon-lg": "size-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props} />
  );
}

export { Button, buttonVariants }

================
File: frontend\src\components\ui\card.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props} />
  );
}

function CardHeader({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props} />
  );
}

function CardTitle({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props} />
  );
}

function CardDescription({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props} />
  );
}

function CardAction({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props} />
  );
}

function CardContent({
  className,
  ...props
}) {
  return (<div data-slot="card-content" className={cn("px-6", className)} {...props} />);
}

function CardFooter({
  className,
  ...props
}) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props} />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

================
File: frontend\src\components\ui\input.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({
  className,
  type,
  ...props
}) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props} />
  );
}

export { Input }

================
File: frontend\src\components\ui\menubar.jsx
================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Menubar({
  className,
  ...props
}) {
  return (
    <MenubarPrimitive.Root
      data-slot="menubar"
      className={cn(
        "bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs",
        className
      )}
      {...props} />
  );
}

function MenubarMenu({
  ...props
}) {
  return <MenubarPrimitive.Menu data-slot="menubar-menu" {...props} />;
}

function MenubarGroup({
  ...props
}) {
  return <MenubarPrimitive.Group data-slot="menubar-group" {...props} />;
}

function MenubarPortal({
  ...props
}) {
  return <MenubarPrimitive.Portal data-slot="menubar-portal" {...props} />;
}

function MenubarRadioGroup({
  ...props
}) {
  return (<MenubarPrimitive.RadioGroup data-slot="menubar-radio-group" {...props} />);
}

function MenubarTrigger({
  className,
  ...props
}) {
  return (
    <MenubarPrimitive.Trigger
      data-slot="menubar-trigger"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none",
        className
      )}
      {...props} />
  );
}

function MenubarContent({
  className,
  align = "start",
  alignOffset = -4,
  sideOffset = 8,
  ...props
}) {
  return (
    <MenubarPortal>
      <MenubarPrimitive.Content
        data-slot="menubar-content"
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props} />
    </MenubarPortal>
  );
}

function MenubarItem({
  className,
  inset,
  variant = "default",
  ...props
}) {
  return (
    <MenubarPrimitive.Item
      data-slot="menubar-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props} />
  );
}

function MenubarCheckboxItem({
  className,
  children,
  checked,
  ...props
}) {
  return (
    <MenubarPrimitive.CheckboxItem
      data-slot="menubar-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  );
}

function MenubarRadioItem({
  className,
  children,
  ...props
}) {
  return (
    <MenubarPrimitive.RadioItem
      data-slot="menubar-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}>
      <span
        className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  );
}

function MenubarLabel({
  className,
  inset,
  ...props
}) {
  return (
    <MenubarPrimitive.Label
      data-slot="menubar-label"
      data-inset={inset}
      className={cn("px-2 py-1.5 text-sm font-medium data-[inset]:pl-8", className)}
      {...props} />
  );
}

function MenubarSeparator({
  className,
  ...props
}) {
  return (
    <MenubarPrimitive.Separator
      data-slot="menubar-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props} />
  );
}

function MenubarShortcut({
  className,
  ...props
}) {
  return (
    <span
      data-slot="menubar-shortcut"
      className={cn("text-muted-foreground ml-auto text-xs tracking-widest", className)}
      {...props} />
  );
}

function MenubarSub({
  ...props
}) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />;
}

function MenubarSubTrigger({
  className,
  inset,
  children,
  ...props
}) {
  return (
    <MenubarPrimitive.SubTrigger
      data-slot="menubar-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8",
        className
      )}
      {...props}>
      {children}
      <ChevronRightIcon className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  );
}

function MenubarSubContent({
  className,
  ...props
}) {
  return (
    <MenubarPrimitive.SubContent
      data-slot="menubar-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props} />
  );
}

export {
  Menubar,
  MenubarPortal,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarGroup,
  MenubarSeparator,
  MenubarLabel,
  MenubarItem,
  MenubarShortcut,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSub,
  MenubarSubTrigger,
  MenubarSubContent,
}

================
File: frontend\src\layout\Landing.jsx
================
import { useState } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import InputArea from "@/components/InputArea";
import { motion } from "framer-motion";

const champions = [
  {
    name: "Ahri",
    role: "The Nine-Tailed Fox",
    image: "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Ahri_0.jpg",
  },
  {
    name: "Yasuo",
    role: "The Unforgiven",
    image: "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Yasuo_0.jpg",
  },
  {
    name: "Jinx",
    role: "The Loose Cannon",
    image: "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Jinx_0.jpg",
  },
  {
    name: "Lux",
    role: "The Lady of Luminosity",
    image: "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Lux_0.jpg",
  },
  {
    name: "Ezreal",
    role: "The Prodigal Explorer",
    image: "https://ddragon.leagueoflegends.com/cdn/img/champion/splash/Ezreal_0.jpg",
  },
];

export default function Landing() {
  const [bgImage, setBgImage] = useState(champions[0].image);

  return (
    <div className="dark bg-black text-white overflow-hidden">
      <div className="relative overflow-hidden min-h-screen">
        {/* Header on top */}
        <Header className="z-30" />

        {/* Background */}
        <motion.div
          className="absolute inset-0 bg-cover bg-center brightness-50 z-10"
          style={{ backgroundImage: `url(${bgImage})` }}
          animate={{
            backgroundPosition: ["50% 48%", "50% 52%", "50% 48%"],
            scale: [1, 1.02, 1],
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut",
          }}
        />

        {/* Hero Section */}
        <section className="relative h-[85vh] flex flex-col justify-center items-center text-center z-20 overflow-hidden">
          <div className="relative z-20 flex flex-col items-center space-y-4">
            <h1 className="text-6xl font-extrabold drop-shadow-lg">Rift Rewind 2025</h1>
            <p className="text-lg text-gray-300">Your Year. Your Fights. Your Glory.</p>
            <InputArea />
          </div>
        </section>

        {/* Popular Champions */}
        <section className="absolute top-20 left-15 transform -translate-x-1/2 z-20">
          <div className="grid grid-rows-1 gap-5">
            {champions.map((champ) => (
              <motion.div
                key={champ.name}
                className="relative group rounded-sm overflow-hidden shadow-lg cursor-pointer"
                whileHover={{ scale: 1.05 }}
                transition={{ duration: 0.3 }}
                onClick={() => setBgImage(champ.image)}
              >
                <img
                  src={champ.image}
                  alt={champ.name}
                  className="object-cover h-15 w-15 brightness-75 group-hover:brightness-100 transition-all duration-300"
                />
              </motion.div>
            ))}
          </div>
        </section>
      </div>
      

      {/* Footer */}
      <Footer />
    </div>
  );
}

================
File: frontend\src\layout\Loading.jsx
================
import { useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { motion } from "framer-motion";

export default function LoadingPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const playerId = location.state?.playerId;

  useEffect(() => {
    if (!playerId) {
      navigate("/");
      return;
    }

    // Simulate loading 
    const fetchData = async () => {
      await new Promise((resolve) => setTimeout(resolve, 3000)); 
      navigate("/statistics", { state: { playerId } });
    };

    fetchData();
  }, [playerId, navigate]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-black text-white">
      <motion.div
        animate={{ rotate: 360 }}
        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
        className="border-4 border-t-transparent border-white rounded-full w-16 h-16 mb-6"
      />
      <h2 className="text-2xl font-semibold">Fetching your data...</h2>
    </div>
  );
}

================
File: frontend\src\layout\Statistics.jsx
================
import { useEffect, useRef } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

const champions = [
  { name: "Ahri", role: "Mid", games: 32, winRate: 68, KDA: 3.5 },
  { name: "Yasuo", role: "Mid", games: 28, winRate: 54, KDA: 2.8 },
  { name: "Lux", role: "Support", games: 20, winRate: 70, KDA: 4.2 },
  { name: "Jinx", role: "ADC", games: 25, winRate: 60, KDA: 3.1 },
  { name: "LeeSin", role: "Jungle", games: 18, winRate: 50, KDA: 2.5 },
  { name: "Akali", role: "Mid", games: 15, winRate: 66, KDA: 3.9 },
  { name: "Ezreal", role: "ADC", games: 12, winRate: 75, KDA: 4.0 },
  { name: "MissFortune", role: "ADC", games: 10, winRate: 55, KDA: 2.9 },
  { name: "Teemo", role: "Top", games: 8, winRate: 62, KDA: 3.2 },
  { name: "Garen", role: "Top", games: 5, winRate: 80, KDA: 4.5 },
];

export default function YearEndSummary() {
  const gridRef = useRef(null);

  useEffect(() => {
    const ctx = gsap.context(() => {
      const blocks = gsap.utils.toArray(".gridBlock");
      const layers = gsap.utils.toArray(".gridLayer");
      const gridEl = document.querySelector(".grid");

      // Scroll-triggered animations
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: ".grid-container",
          start: "top top",
          end: "+=100%",
          scrub: true,
          pin: ".grid",
          anticipatePin: 1,
        },
      });

      tl.set(blocks, { autoAlpha: 0 })
        .to(blocks, { autoAlpha: 1, duration: 0.6, stagger: 0.15 }, 0)
        .from(layers, { scale: 2.5, ease: "power1.out", stagger: 0.15 }, 0);

      // Move grid up smoothly at the end
      gsap.to(gridEl, {
        y: "-50vh",
        scrollTrigger: {
          trigger: ".grid-container",
          start: "bottom bottom",
          end: "+=50%",
          scrub: true,
        },
      });

      // Set champion images
      gsap.set(blocks, {
        backgroundImage: (i) =>
          `url(https://ddragon.leagueoflegends.com/cdn/img/champion/splash/${champions[i % champions.length].name}_0.jpg)`,
      });
    }, gridRef);

    return () => ctx.revert();
  }, []);

  const positions = [
    "top-[5vw] left-[20vw] w-[10vw] h-[10vw]",
    "top-0 left-[32.5vw] w-[15vw] h-[15vw]",
    "top-[25vw] left-0 w-[15vw] h-[15vw]",
    "top-[17.5vw] left-[17.5vw] w-[30vw] h-[30vw]",
    "top-[20vw] left-[50vw] w-[5vw] h-[5vw]",
    "top-[27.5vw] left-[50vw] w-[20vw] h-[20vw]",
    "top-[42.5vw] left-[10vw] w-[5vw] h-[5vw]",
    "bottom-[5vw] left-[42.5vw] w-[5vw] h-[5vw]",
    "bottom-0 left-[50vw] w-[10vw] h-[10vw]",
  ];

  // Helper for role distribution
  const roleDistribution = champions.reduce((acc, c) => {
    acc[c.role] = (acc[c.role] || 0) + c.games;
    return acc;
  }, {});

  return (
    <div className="bg-gray-900 text-white font-sans overflow-x-hidden">
      <div className="px-4 py-8 ">
        <h1 className="text-center text-4xl md:text-5xl py-8 font-bold">
          Year-End Summary
        </h1>
        <p className="text-center text-lg md:text-xl max-w-2xl mx-auto pb-8">
          Here's a summary of your most played champions, performance stats, and roles this year.
        </p>
      </div>

      {/* Champion Grid */}
      <div ref={gridRef} className="grid-container relative w-screen h-[300vh] m-8">
        <div className="grid absolute w-[70vw] h-[60vw] left-[15vw] top-0">
          {positions.map((pos, i) => {
            const champ = champions[i % champions.length];
            return (
              <div
                key={i}
                className={`gridLayer absolute top-0 left-0 w-full h-full ${
                  i === 3 ? "centerPiece" : ""
                }`}
                style={{ transformOrigin: "45% 50%" }}
              >
                <div
                  className={`gridBlock absolute rounded-lg shadow-lg bg-cover bg-center ${pos} ${
                    i === 3 ? "centerBlock" : ""
                  } flex items-end justify-center`}
                >
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {/* Other Insights Section */}
      <div className="max-w-4xl mx-auto text-center py-16 px-4 space-y-6">
        <h2 className="text-3xl font-semibold">Other Insights</h2>
        <p>Total Games Played: {champions.reduce((a, c) => a + c.games, 0)}</p>
        <p>
          Favorite Role:{" "}
          {Object.keys(roleDistribution).reduce((a, b) =>
            roleDistribution[a] > roleDistribution[b] ? a : b
          )}
        </p>
        <p>
          Highest Win Rate:{" "}
          {champions.reduce((a, c) => (c.winRate > a.winRate ? c : a), champions[0]).name}
        </p>
        <p>
          Highest KDA:{" "}
          {champions.reduce((a, c) => (c.KDA > a.KDA ? c : a), champions[0]).name}
        </p>
        <p>
          Role Distribution:
          <ul className="list-disc list-inside">
            {Object.entries(roleDistribution).map(([role, games]) => (
              <li key={role}>
                {role}: {games} games
              </li>
            ))}
          </ul>
        </p>
      </div>
    </div>
  );
}

================
File: frontend\src\layout\TestLayout.jsx
================
import HeroSection from '@/components/HeroSection';
import StatsOverview from '@/components/StatsOverview';
import ChampionShowcase from '@/components/ChampionShowcase';
import PlaystyleAnalysis from '@/components/PlaystyleAnalysis';
import AchievementsSection from '@/components/AchievementsSection';
import TimelineSection from '@/components/TimelineSection';
import ClosingSection from '@/components/ClosingSection';
import ScrollingBackground from '@/components/ScrollingBackground';
import CardRevealSection from '@/components/CardRevealSection';

const Index = () => {
  return (
    <div className="min-h-screen bg-background relative overflow-x-hidden">
      <ScrollingBackground />
      <div className="relative z-10">
        <HeroSection />
        <StatsOverview />
        <ChampionShowcase />
        <CardRevealSection />
        <PlaystyleAnalysis />
        <TimelineSection />
        <AchievementsSection />
        <ClosingSection />
      </div>
    </div>
  );
};

export default Index;
